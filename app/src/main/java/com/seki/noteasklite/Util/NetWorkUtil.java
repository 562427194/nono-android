package com.seki.noteasklite.Util;import android.content.Context;import android.content.Intent;import android.net.ConnectivityManager;import android.net.NetworkInfo;import com.seki.noteasklite.Activity.UserInfoActivity;import com.seki.noteasklite.MyApp;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.NameValuePair;import org.apache.http.client.HttpClient;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.protocol.HTTP;import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.Arrays;import java.util.List;public class NetWorkUtil {	public static boolean isNetworkAvailable(Context context) {        ConnectivityManager cm = (ConnectivityManager) context                .getSystemService(Context.CONNECTIVITY_SERVICE);        if (cm == null) {           } else {              NetworkInfo[] info = cm.getAllNetworkInfo();            if (info != null) {                   for (int i = 0; i < info.length; i++) {                       if (info[i].getState() == NetworkInfo.State.CONNECTED) {                        return true;                       }                   }               }           }           return false;       }	public static boolean isWifi(Context context) {        ConnectivityManager cm = (ConnectivityManager) context                .getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo networkINfo = cm.getActiveNetworkInfo();        if (networkINfo != null                   && networkINfo.getType() == ConnectivityManager.TYPE_WIFI) {            return true;           }           return false;       }    public static String httpHelper(String scriptName,NameValuePair... nameValuePairs) {        final String tagetHeader = "http://diandianapp.sinaapp.com/";        String targetSite = tagetHeader + scriptName;        StringBuilder builder = new StringBuilder();        try {            HttpClient client = new DefaultHttpClient();            HttpPost post = new HttpPost(targetSite);            List<NameValuePair> paramsList = Arrays.asList(nameValuePairs);            post.setEntity(new UrlEncodedFormEntity(paramsList, HTTP.UTF_8));            HttpResponse response = client.execute(post);            HttpEntity entity = response.getEntity();            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(entity.getContent()));            for (String s = bufferedReader.readLine(); s != null; s = bufferedReader.readLine()) {                builder.append(s);            }        } catch (Exception e) {            e.printStackTrace();        }        return builder.toString();    }    /**     *to determine which activity we should switch to     * @param mContext     * @param source the verification behind the control     * @param dest the verification in local     */    public static  void verifyWhichActivityToSwitch(Context mContext,String source, String dest)    {        UserInfoActivity.start(mContext, dest);    }    public  static String decodeUnicode(String theString) {        char aChar;        int len = theString.length();        StringBuffer outBuffer = new StringBuffer(len);        for (int x = 0; x < len;) {            aChar = theString.charAt(x++);            if (aChar == '\\') {                aChar = theString.charAt(x++);                if (aChar == 'u') {                    // Read the xxxx                    int value = 0;                    for (int i = 0; i < 4; i++) {                        aChar = theString.charAt(x++);                        switch (aChar) {                            case '0':                            case '1':                            case '2':                            case '3':                            case '4':                            case '5':                            case '6':                            case '7':                            case '8':                            case '9':                                value = (value << 4) + aChar - '0';                                break;                            case 'a':                            case 'b':                            case 'c':                            case 'd':                            case 'e':                            case 'f':                                value = (value << 4) + 10 + aChar - 'a';                                break;                            case 'A':                            case 'B':                            case 'C':                            case 'D':                            case 'E':                            case 'F':                                value = (value << 4) + 10 + aChar - 'A';                                break;                            default:                                throw new IllegalArgumentException(                                        "Malformed   \\uxxxx   encoding.");                        }                    }                    outBuffer.append((char) value);                } else {                    if (aChar == 't')                        aChar = '\t';                    else if (aChar == 'r')                        aChar = '\r';                    else if (aChar == 'n')                        aChar = '\n';                    else if (aChar == 'f')                        aChar = '\f';                    outBuffer.append(aChar);                }            } else                outBuffer.append(aChar);        }        return outBuffer.toString();    }}